{"version":3,"sources":["core/config/history.ts","modules/date-info/reducer/index.ts","modules/date-info/actions/index.ts","core/reducer/index.ts","modules/date-info/api/fetch-date-fact/index.ts","modules/date-info/sagas/date-fact-fetch/index.ts","core/sagas/index.ts","core/config/persist.ts","core/store.ts","pages/home/components/date-range-picker-1/styles.ts","pages/home/components/date-range-picker-1/index.tsx","pages/home/styles.ts","pages/home/helpers/is-leap-year/index.ts","pages/home/helpers/count-mondays/index.ts","pages/home/index.tsx","pages/home/container.ts","core/router/index.tsx","core/index.tsx","serviceWorker.ts","index.tsx"],"names":["history","createBrowserHistory","initialState","isLoadingFact","dateFact","startDate","endDate","dateInfoReducer","state","action","type","data","reducers","router","connectRouter","dateInfo","appReducer","combineReducers","fetchDateFact","day","month","a","url","fetch","method","response","text","sagaWorker","dateFactFetchSaga","parsedDate","Date","getDate","getMonth","call","put","console","error","takeLatest","rootSaga","all","persistConfig","key","storage","throttle","stateReconciler","autoMergeLevel1","logger","createLogger","collapsed","level","sagaMiddleware","createSagaMiddleware","composeEnhancers","composeWithDevTools","mode","persistedReducer","persistReducer","rootReducer","getStore","storeMode","createStore","applyMiddleware","routerMiddleware","store","persistor","persistStore","warn","run","configureStore","p","StyledRangePickerWrapper","styled","div","DateRangePicker","props","onChange","value","defaultProps","StyledPageContainer","StyledLabel","StyledFactBox","StyledSpinnerPositioner","isLeapYear","year","countMondays","date","startDateObj","endDateObj","amountMondays","currentDate","setDate","getDay","parseDateObj","dateString","getReadableDate","Moment","format","getIsoDate","toISOString","HomePage","onChangeDateRange","useMemo","rangePickerValue","handleDateRangeChange","useCallback","nextRange","nextStart","nextEnd","startDateStr","endDateStr","startDateReadable","endDateReadable","daysInRange","parsedStartDate","getTime","getDaysInRange","hasLeapYear","startYear","getFullYear","endYear","rangeContainsLeapYear","numberOfMondays","Container","ListGroup","ListGroupItem","Spinner","color","connect","dispatch","nextStartDate","nextEndDate","AppRouter","path","hot","loading","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.91039f71.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\nexport const history = createBrowserHistory();\n\n","import { IReduxAction } from '../../../core/interfaces';\nimport { FACT_FETCH_SUCCESS, DATE_RANGE_CHANGE, FACT_FETCH_ERROR } from '../actions';\n\nexport interface IDateInfoReducerState {\n  isLoadingFact: boolean;\n  dateFact: string;\n  startDate: string;\n  endDate: string;\n}\n\nconst initialState: IDateInfoReducerState = {\n  isLoadingFact: false,\n  dateFact: '',\n  startDate: '',\n  endDate: '',\n};\n\nconst dateInfoReducer = (state = initialState, action: IReduxAction): IDateInfoReducerState => {\n  const { type, data } = action;\n  switch (type) {\n    case DATE_RANGE_CHANGE: {\n      const { startDate, endDate } = data;\n      return {\n        ...state,\n        dateFact: 'loading ...',\n        isLoadingFact: true,\n        startDate,\n        endDate,\n      };\n    }\n    case FACT_FETCH_ERROR: {\n      return {\n        ...state,\n        dateFact: '',\n        isLoadingFact: false,\n      };\n    }\n    case FACT_FETCH_SUCCESS: {\n      return {\n        ...state,\n        dateFact: data,\n        isLoadingFact: false,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default dateInfoReducer;\n","export const DATE_RANGE_CHANGE = 'date-info/DATE_RANGE_CHANGE';\nexport const FACT_FETCH_SUCCESS = 'date-info/FACT_FETCH_SUCCESS';\nexport const FACT_FETCH_ERROR = 'date-info/FACT_FETCH_ERROR';\n\nexport const dateRangeChange = (startDate: string, endDate: string) => ({\n  type: DATE_RANGE_CHANGE, data: { startDate, endDate },\n});\n\nexport const factFetchSuccess = (nextFact: string) => ({\n  type: FACT_FETCH_SUCCESS, data: nextFact,\n});\n\nexport const factFetchError = (error?: any) => ({\n  type: FACT_FETCH_ERROR, data: error,\n});\n","import { combineReducers } from 'redux';\nimport { history } from '../config/history';\nimport { connectRouter } from 'connected-react-router';\nimport dateInfoReducer from '../../modules/date-info/reducer';\n\n\nconst reducers = {\n  router: connectRouter(history),\n  dateInfo: dateInfoReducer,\n};\n\nexport const appReducer = combineReducers(reducers);\n\nexport type IApplicationState = ReturnType<typeof appReducer>;\n","const fetchDateFact = async (day: number, month: number): Promise<string> => {\n  const url = `http://numbersapi.com/${month}/${day}/date`;\n  const response = await fetch(url, { method: 'GET' });\n  return await response.text();\n};\n\nexport default fetchDateFact;\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport { DATE_RANGE_CHANGE, factFetchError, factFetchSuccess } from '../../actions';\nimport { IReduxAction } from '../../../../core/interfaces';\nimport fetchDateFact from '../../api/fetch-date-fact';\n\nfunction* sagaWorker(action: IReduxAction) {\n  try {\n    const {\n      data: {\n        startDate,\n      },\n    } = action;\n\n    const parsedDate = new Date(startDate);\n    const day = parsedDate.getDate();\n    const month = parsedDate.getMonth() + 1;\n\n    const dateFact = yield call(fetchDateFact, day, month);\n    return yield put(factFetchSuccess(dateFact));\n  } catch (ex) {\n    console.error(ex);\n    return yield put(factFetchError(ex));\n  }\n}\n\nfunction* dateFactFetchSaga() {\n  yield takeLatest([DATE_RANGE_CHANGE], sagaWorker);\n}\n\nexport default dateFactFetchSaga;\n","import { all } from 'redux-saga/effects';\nimport dateFactFetchSaga from '../../modules/date-info/sagas/date-fact-fetch';\n\nexport function* rootSaga() {\n  yield all([\n    dateFactFetchSaga(),\n  ]);\n}\n","import storage from 'redux-persist/lib/storage';\nimport autoMergeLevel1 from 'redux-persist/es/stateReconciler/autoMergeLevel1';\n\nexport const persistConfig = {\n  key: 'root',\n  storage,\n  throttle: 1000,\n  stateReconciler: autoMergeLevel1,\n};\n","import { appReducer as rootReducer } from './reducer';\nimport { rootSaga } from './sagas';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { routerMiddleware } from 'connected-react-router';\nimport { createLogger } from 'redux-logger';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistConfig } from './config/persist';\nimport { history } from './config/history';\n\n/* Middleware Configuration */\n\nconst logger = createLogger({\n  collapsed: true,\n  level: 'info',\n});\n\nconst sagaMiddleware = createSagaMiddleware();\n\n/* Redux Devtools Configuration */\n\nconst options = {};\nconst composeEnhancers = composeWithDevTools(options);\n\n/* Store Configuration */\n\nconst configureStore = (mode: 'dev' | 'prod' = 'prod') => {\n  const persistedReducer = persistReducer(persistConfig, rootReducer as any);\n\n  const getStore = (storeMode: string) => {\n    /**\n     * Dev store, needs compose enhancers,\n     * Only use redux devtools in dev mode as it is expensive\n     */\n    if (storeMode === 'dev') {\n      return createStore(\n        persistedReducer,\n        composeEnhancers(\n          applyMiddleware(\n            sagaMiddleware, routerMiddleware(history), logger\n          )\n        )\n      );\n    }\n    /**\n     * Prod Store\n     */\n    return createStore(\n      persistedReducer,\n      applyMiddleware(\n        sagaMiddleware, routerMiddleware(history)\n      )\n    );\n  };\n\n  const store = getStore(mode);\n\n  const persistor = persistStore(\n    store,\n    null,\n    () => {\n      console.warn('store persisted, attempting to load user.');\n    }\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  // @ts-ignore\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    // @ts-ignore\n    module.hot.accept('./reducer', () => {\n      const nextRootReducer = require('./reducer');\n      store.replaceReducer(nextRootReducer);\n    });\n  }\n\n  return { persistor, store };\n};\n\n/* Store environment selection */\n\nconst { NODE_ENV } = process.env;\n\nconst STORE_MODE = NODE_ENV === 'production' ? 'prod' : 'dev';\n\nconst {\n  persistor: p,\n  store: s\n} = configureStore(STORE_MODE);\n\nexport const store = s;\nexport const persistor = p;\n","import styled from 'styled-components';\n\nexport const StyledRangePickerWrapper = styled.div<any>`\n  margin: 10px 0;\n`;\n","import React, { FC } from 'react';\nimport { DateRangePicker as DateRangePickerLib } from 'rsuite';\nimport { StyledRangePickerWrapper } from './styles';\n\ninterface IProps {\n  onChange: (nextRange: any[]) => void;\n  value: any;\n}\n\nconst DateRangePicker: FC<IProps> = (props) => {\n  const {\n    onChange,\n    value,\n  } = props;\n\n  return (\n    <StyledRangePickerWrapper>\n      <DateRangePickerLib\n        onChange={onChange}\n        value={value}\n      />\n    </StyledRangePickerWrapper>\n  );\n};\n\nDateRangePicker.defaultProps = {};\n\nexport default DateRangePicker;\n","import styled from 'styled-components';\n\nexport const StyledPageContainer = styled.div`\n  margin-top: 15px;\n`;\n\nexport const StyledLabel = styled.div`\n  font-weight: bold;\n`;\n\nexport const StyledLabelContent = styled.div``;\n\nexport const StyledFactBox = styled.div`\n  display: flex;\n  margin: 15px 0;\n  border-radius: 0.25rem;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n  padding: 15px;\n`;\n\nexport const StyledSpinnerPositioner = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  padding: 5px 0;\n  width: 100%;\n`;\n","const isLeapYear = (year): boolean => {\n  if (year % 400 === 0) {\n    return true;\n  }\n  return (year % 4 === 0) && (year % 100 !== 0);\n};\n\nexport default isLeapYear;\n","const addNextDate = (date): void => {\n  date.setDate(date.getDate() + 1);\n};\n\nconst countMondays = (startDate: string, endDate: string): number => {\n  const startDateObj = new Date(startDate);\n  const endDateObj = new Date(endDate);\n  let amountMondays = 0;\n  for (let currentDate = startDateObj; currentDate <= endDateObj; addNextDate(currentDate)) {\n    if (currentDate.getDay() === 1) {\n      amountMondays++;\n    }\n  }\n  return amountMondays;\n};\n\nexport default countMondays;\n","import React, { FC, useMemo, useCallback } from 'react';\nimport Moment from 'moment';\nimport DateRangePicker from './components/date-range-picker-1';\nimport { connect } from 'react-redux';\nimport { mapStateToProps, mapDispatchToProps } from './container';\nimport { Container, ListGroup, ListGroupItem, Spinner } from 'reactstrap';\nimport { StyledFactBox, StyledLabel, StyledPageContainer, StyledSpinnerPositioner } from './styles';\n\nimport isLeapYear from './helpers/is-leap-year';\nimport countMondays from './helpers/count-mondays';\n\nconst parseDateObj = (dateString?: string): Date | null => {\n  if (!dateString) {\n    return null;\n  }\n  return new Date(dateString);\n};\n\nconst getDaysInRange = (startDate: string, endDate: string): number => {\n  if (!startDate || !endDate) {\n    return null;\n  }\n  const parsedStartDate = parseDateObj(startDate);\n  const parsedEndDate = parseDateObj(endDate);\n  const milisecondsInDay = 1000 * 60 * 60 * 24;\n  return (parsedEndDate.getTime() - parsedStartDate.getTime()) / milisecondsInDay;\n};\n\nconst rangeContainsLeapYear = (startDate: string, endDate: string): boolean => {\n  const startYear = new Date(startDate).getFullYear();\n  const endYear = new Date(endDate).getFullYear();\n  return isLeapYear(startYear) || isLeapYear(endYear);\n};\n\nconst getReadableDate = (date: string): string => {\n  if (!date) {\n    return 'No date selected.';\n  }\n  return Moment(date).format('YYYY-MM-DD');\n};\n\nconst getIsoDate = (date: Date): string => {\n  return Moment(date).toISOString();\n};\n\n\ninterface IContainerProps {\n  dateFact?: string;\n  endDate?: string;\n  isLoadingFact?: boolean;\n  onChangeDateRange?: (nextStartDate: string, nextEndDate: string) => void,\n  startDate?: string,\n}\n\nexport const HomePage: FC<IContainerProps> = (props) => {\n  const {\n    dateFact,\n    endDate,\n    isLoadingFact,\n    onChangeDateRange,\n    startDate,\n  } = props;\n\n  const startDateObj = useMemo(() => parseDateObj(startDate), [startDate, parseDateObj]);\n  const endDateObj = useMemo(() => parseDateObj(endDate), [endDate, parseDateObj]);\n\n  const rangePickerValue = useMemo(() => {\n    if (!startDateObj || !endDateObj) {\n      return [];\n    }\n    return [startDateObj, endDateObj];\n  }, [startDateObj, endDateObj]);\n\n  const handleDateRangeChange = useCallback((nextRange: any[]) => {\n    const [nextStart, nextEnd] = nextRange;\n    const startDateStr = getIsoDate(nextStart);\n    const endDateStr = getIsoDate(nextEnd);\n    onChangeDateRange(startDateStr, endDateStr);\n  }, [getIsoDate, onChangeDateRange]);\n\n  const startDateReadable: string = getReadableDate(startDate);\n  const endDateReadable: string = getReadableDate(endDate);\n  const daysInRange: number = getDaysInRange(startDate, endDate);\n  const hasLeapYear: boolean = rangeContainsLeapYear(startDate, endDate);\n  const numberOfMondays: number = countMondays(startDate, endDate) || 0;\n\n  return (\n    <StyledPageContainer>\n      <Container>\n        <h1>Simple date facts</h1>\n        <p>Please select a date range below to get started.</p>\n\n        <DateRangePicker\n          onChange={handleDateRangeChange}\n          value={rangePickerValue}\n        />\n\n        <div>\n          <ListGroup>\n            <ListGroupItem>\n              <StyledLabel>Start Date:</StyledLabel> {startDateReadable || 'None selected.'}\n            </ListGroupItem>\n            <ListGroupItem>\n              <StyledLabel>End Date:</StyledLabel> {endDateReadable || 'None selected.'}\n            </ListGroupItem>\n            <ListGroupItem>\n              <StyledLabel>Number of days:</StyledLabel> {daysInRange || 'None selected.'}\n            </ListGroupItem>\n            <ListGroupItem>\n              <StyledLabel>Are either the Start or End Date a leap year?:</StyledLabel> {hasLeapYear ? 'Yes!' : 'No'}\n            </ListGroupItem>\n            <ListGroupItem>\n              <StyledLabel>Number of mondays:</StyledLabel> {numberOfMondays}\n            </ListGroupItem>\n          </ListGroup>\n        </div>\n\n        <StyledFactBox>\n          {isLoadingFact && (\n            <StyledSpinnerPositioner>\n              <Spinner color=\"primary\"/>\n            </StyledSpinnerPositioner>\n          )}\n          {!isLoadingFact && (\n            <div>\n              <h4>What happened on this day?</h4>\n              <p>{dateFact || 'Nothing yet!'}</p>\n            </div>\n          )}\n        </StyledFactBox>\n      </Container>\n    </StyledPageContainer>\n  );\n};\n\nHomePage.defaultProps = {\n  dateFact: '',\n  endDate: '',\n  isLoadingFact: false,\n  startDate: '',\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\n","import { IApplicationState } from '../../core/reducer';\nimport { dateRangeChange } from '../../modules/date-info/actions';\n\nexport const mapStateToProps = (state: IApplicationState) => {\n  const {\n    dateInfo: {\n      dateFact,\n      isLoadingFact,\n      endDate,\n      startDate,\n    }\n  } = state;\n\n  return {\n    dateFact,\n    isLoadingFact,\n    endDate,\n    startDate,\n  };\n};\n\nexport const mapDispatchToProps = (dispatch: any) => ({\n  onChangeDateRange(nextStartDate: string, nextEndDate: string) {\n    dispatch(dateRangeChange(nextStartDate, nextEndDate));\n  },\n});\n","import React, { FC } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport HomePage from '../../pages/home';\n\ninterface IProps {\n  [x: string]: any;\n}\n\nexport const AppRouter: FC<IProps> = (props) => {\n  return (\n    <Switch>\n      <Route path=\"/\">\n        <HomePage />\n      </Route>\n    </Switch>\n  );\n};\n\nAppRouter.defaultProps = {};\n\n","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'rsuite/dist/styles/rsuite-default.css';\n\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport { hot } from 'react-hot-loader/root';\nimport { persistor, store } from './store';\nimport { history } from './config/history';\n\nimport { AppRouter } from './router';\nimport { ConnectedRouter } from 'connected-react-router';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate\n        loading={<div>Loading...</div>}\n        persistor={persistor}\n      >\n      </PersistGate>\n      <ConnectedRouter history={history}>\n        <AppRouter/>\n      </ConnectedRouter>\n    </Provider>\n  );\n}\n\nexport default hot(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './core/index.css';\nimport App from './core';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}